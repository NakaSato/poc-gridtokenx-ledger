apiVersion: v1
kind: ConfigMap
metadata:
  name: thai-energy-monitoring-config
  namespace: thai-energy-trading
  labels:
    app: thai-energy-trading
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "thai_energy_rules.yml"

    scrape_configs:
      - job_name: 'thai-energy-validators'
        static_configs:
          - targets: ['thai-energy-validator-0:8080', 'thai-energy-validator-1:8080', 'thai-energy-validator-2:8080']
        metrics_path: /metrics
        scrape_interval: 10s

      - job_name: 'thai-energy-api'
        static_configs:
          - targets: ['thai-energy-api-service:80']
        metrics_path: /metrics
        scrape_interval: 15s

      - job_name: 'thai-energy-oracle'
        static_configs:
          - targets: ['thai-energy-oracle-service:8081']
        metrics_path: /metrics
        scrape_interval: 30s

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - thai-energy-trading
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true

  thai_energy_rules.yml: |
    groups:
    - name: thai_energy_alerts
      rules:
      - alert: ValidatorNodeDown
        expr: up{job="thai-energy-validators"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Validator node is down"
          description: "Validator node {{ $labels.instance }} has been down for more than 1 minute."

      - alert: HighCPUUsage
        expr: rate(process_cpu_seconds_total[5m]) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is above 80% for more than 5 minutes on {{ $labels.instance }}."

      - alert: HighMemoryUsage
        expr: (process_resident_memory_bytes / 1024 / 1024 / 1024) > 3
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 3GB for more than 5 minutes on {{ $labels.instance }}."

      - alert: BlockProductionStopped
        expr: increase(substrate_block_height[5m]) == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Block production has stopped"
          description: "No new blocks have been produced for more than 2 minutes."

  grafana-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Thai Energy Trading System",
        "tags": ["thai-energy"],
        "timezone": "Asia/Bangkok",
        "panels": [
          {
            "title": "Validator Nodes Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"thai-energy-validators\"}",
                "legendFormat": "{{instance}}"
              }
            ]
          },
          {
            "title": "Block Height",
            "type": "graph",
            "targets": [
              {
                "expr": "substrate_block_height",
                "legendFormat": "Block Height"
              }
            ]
          },
          {
            "title": "Transaction Pool",
            "type": "graph",
            "targets": [
              {
                "expr": "substrate_txpool_validations_total",
                "legendFormat": "Transactions"
              }
            ]
          },
          {
            "title": "Energy Trading Volume",
            "type": "graph",
            "targets": [
              {
                "expr": "thai_energy_trade_volume_total",
                "legendFormat": "Volume (kWh)"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: thai-energy-trading
  labels:
    app: thai-energy-trading
    component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: storage-volume
          mountPath: /prometheus
        command:
          - /bin/prometheus
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --storage.tsdb.retention.time=30d
          - --web.enable-lifecycle
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config-volume
        configMap:
          name: thai-energy-monitoring-config
      - name: storage-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: thai-energy-trading
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: thai-energy-trading
  labels:
    app: thai-energy-trading
    component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "thai-energy-admin"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: thai-energy-trading
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
