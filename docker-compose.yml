services:
  # Thai Energy Trading System - Main Application
  thai-energy-trading:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: thai-energy-trading
    ports:
      - "8080:8080"    # API Server
      - "9944:9944"    # WebSocket RPC
      - "30333:30333"  # P2P Network
    environment:
      - RUST_LOG=info
      - DATABASE_PASSWORD=password123
      - JWT_SECRET=your-jwt-secret-here
      - GRID_OPERATOR_KEY=your-grid-operator-key-here
    volumes:
      - thai_energy_data:/app/data
      - thai_energy_logs:/app/logs
      - ./docker/config:/app/config:ro
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: thai-energy-postgres
    environment:
      - POSTGRES_DB=thai_energy_trading
      - POSTGRES_USER=thai_energy
      - POSTGRES_PASSWORD=password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thai_energy -d thai_energy_trading"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: thai-energy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - thai-energy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: thai-energy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - thai-energy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: thai-energy-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - thai-energy-network
    depends_on:
      - prometheus

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: thai-energy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - thai-energy-network
    depends_on:
      - thai-energy-trading

  # Oracle Service for External Data
  oracle-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: thai-energy-oracle
    command: ["./oracle-service"]
    environment:
      - RUST_LOG=info
      - ORACLE_API_KEY=your-oracle-api-key
      - BLOCKCHAIN_RPC=ws://thai-energy-trading:9944
    volumes:
      - oracle_data:/app/data
    networks:
      - thai-energy-network
    depends_on:
      - thai-energy-trading

volumes:
  thai_energy_data:
    driver: local
  thai_energy_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  oracle_data:
    driver: local

networks:
  thai-energy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
