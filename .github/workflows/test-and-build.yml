name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run tests with release profile
      run: cargo test --release --verbose --all-features

    - name: Test 1 kWh = 1 Token conversion
      run: cargo test test_one_kwh_equals_one_token --verbose

    - name: Test energy trading functionality
      run: cargo test test_energy_market --verbose

    - name: Test blockchain functionality
      run: cargo test test_blockchain --verbose

    - name: Generate test report
      run: |
        cargo test --no-run --message-format=json > test-results.json
        echo "Test compilation completed successfully"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build debug
      run: cargo build --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Verify binary
      run: |
        ./target/release/ledger --help || echo "Binary built successfully"
        ls -la target/release/

    - name: Run demo
      run: timeout 30s ./target/release/ledger || echo "Demo completed"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Run benchmarks
      run: |
        # Create simple benchmark test
        echo "Running energy trading performance tests..."
        time cargo test --release test_energy_market_order_placement
        time cargo test --release test_blockchain_creation
        echo "Benchmarks completed"

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: energy-trading-ecosystem:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Build project
      run: cargo build --release

    - name: Run integration tests
      run: |
        echo "Testing complete energy trading workflow..."
        ./target/release/ledger > demo_output.txt 2>&1
        
        # Verify demo output contains expected elements
        grep -q "Energy Trading Ecosystem" demo_output.txt
        grep -q "1 kWh = 1 token" demo_output.txt
        grep -q "Demo completed successfully" demo_output.txt
        
        echo "Integration tests passed!"

    - name: Upload demo output
      uses: actions/upload-artifact@v4
      with:
        name: demo-output
        path: demo_output.txt
